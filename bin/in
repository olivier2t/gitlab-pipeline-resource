#!/bin/bash

set -e

exec 5>&1 # make stdout available as fd 5 for the result
exec 1>&2 # redirect all output to stderr for logging

main() {
  echo "--[IN]-------------------------"
  targetDirectory $1
  extractVersion
  fetchResource
  emitResult
}

targetDirectory() {
  target_dir=${1:-`echo $TMPDIR`}
  echo "--> target directory is: $target_dir"
}

extractVersion() {
  echo "--> extracting requested version..."
  requestedVersion=$(jq -r '.version.id // ""' < $payload)
  echo "requested version: $requestedVersion"
}

fetchResource() {
  set -o pipefail

  echo "--> retrieving GitLab pipeline details ..."

  response_body=$(mktemp /tmp/response_body.XXXXXX)
  curl -s --header "PRIVATE-TOKEN: ${source_access_token}" \
    "${source_base_url}/api/v4/projects/${source_project_id}/pipelines/${requestedVersion}" > $response_body || exit $1
  cat ${response_body} | jq -r '.'
  cp ${response_body} ${target_dir}/body
  echo ${requestedVersion} >${target_dir}/id

  pipeline_status=$(cat $response_body | jq -r ".status")
  pipeline_web_url=$(cat $response_body | jq -r ".web_url")
  pipeline_created_by=$(cat $response_body | jq -r ".user.name")
  pipeline_created_at=$(cat $response_body | jq -r ".created_at")
}

emitResult() {
  jq  --arg pipeline_id "$requestedVersion" \
      --arg pipeline_status "$pipeline_status" \
      --arg pipeline_web_url "$pipeline_web_url" \
      --arg pipeline_created_by "$pipeline_created_by" \
      --arg pipeline_created_at "$pipeline_created_at" \
      -n '{
    "version": {
      "id": $pipeline_id
    },
    "metadata": [
      { "name": "status", "value": $pipeline_status },
      { "name": "web_url", "value": $pipeline_web_url },
      { "name": "created_by", "value": $pipeline_created_by },
      { "name": "created_at", "value": $pipeline_created_at }
    ]
  }' >&5
}

if [ "${BASH_SOURCE[0]}" == "${0}" ]; then
  source $(dirname $0)/common
  main "$@"
fi
